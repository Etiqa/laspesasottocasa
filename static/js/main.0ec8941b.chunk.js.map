{"version":3,"sources":["components/shop/index.js","containers/ShopList/index.js","App.js","serviceWorker.js","index.js"],"names":["Name","styled","div","shop","urls","href","name","address","email","phones","join","merce","Div","fetcher","url","fetch","then","r","json","useSWR","process","data","error","map","city","shops","key","myTheme","App","theme","className","ShopList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"qVAIA,IAAMA,EAAOC,UAAOC,IAAV,KAIK,cAAe,IAAZC,EAAW,EAAXA,KAChB,OACE,6BACE,kBAACH,EAAD,KACGG,EAAKC,KAAO,kBAAC,IAAD,CAAGC,KAAMF,EAAKC,KAAK,IAAKD,EAAKG,MAAYH,EAAKG,MAE7D,6BAAMH,EAAKI,SACX,6BAAMJ,EAAKK,OACX,6BAAML,EAAKM,OAASN,EAAKM,OAAOC,KAAK,MAAQ,IAC7C,6BAAMP,EAAKQ,MAAQR,EAAKQ,MAAMD,KAAK,MAAQ,IAC3C,+B,qECZN,IAAME,EAAMX,UAAOC,IAAV,KAEHW,EAAU,SAACC,GAAD,OAASC,MAAMD,GAAKE,MAAK,SAACC,GAAD,OAAOA,EAAEC,WAEnC,aAAO,IAAD,EACKC,YAAOC,qCAA8CP,GAArEQ,EADW,EACXA,KAER,OAHmB,EACLC,MAEI,kBAACV,EAAD,uBACbS,EAEH,kBAACT,EAAD,KACGS,EAAKE,KAAI,SAACC,GAAD,OACRA,EAAKC,MAAMF,KAAI,SAACpB,GAAD,OAAU,kBAAC,EAAD,CAAMuB,IAAKvB,EAAKG,KAAMH,KAAMA,WAJzC,kBAACS,EAAD,oBCRde,EAAU,CACd,kBAAmB,OACnB,qBAAsB,SAgBTC,MAbf,WACE,OACE,kBAAC,IAAD,CAAmBC,MAAOF,GACxB,kBAAC,IAAD,CAAWG,UAAU,QACnB,yBAAKA,UAAU,OACb,4BAAQA,UAAU,eAClB,kBAACC,EAAD,UCLUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAC6B,GACLA,EAAaC,gBAEdC,OAAM,SAACzB,GACN0B,QAAQ1B,MAAMA,EAAM2B,c","file":"static/js/main.0ec8941b.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { A } from \"@bootstrap-styled/v4\";\n\nconst Name = styled.div`\n  font-weight: 700;\n`;\n\nexport default ({ shop }) => {\n  return (\n    <div>\n      <Name>\n        {shop.urls ? <A href={shop.urls[0]}>{shop.name}</A> : shop.name}\n      </Name>\n      <div>{shop.address}</div>\n      <div>{shop.email}</div>\n      <div>{shop.phones ? shop.phones.join(\", \") : \"\"}</div>\n      <div>{shop.merce ? shop.merce.join(\", \") : \"\"}</div>\n      <hr />\n    </div>\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport useSWR from \"swr\";\n\nimport Shop from \"../../components/shop\";\n\nconst Div = styled.div``;\n\nconst fetcher = (url) => fetch(url).then((r) => r.json());\n\nexport default () => {\n  const { data, error } = useSWR(process.env.PUBLIC_URL + \"/data/torino.json\", fetcher);\n\n  if (error) return <Div>failed to load</Div>;\n  if (!data) return <Div>loading...</Div>;\n  return (\n    <Div>\n      {data.map((city) =>\n        city.shops.map((shop) => <Shop key={shop.name} shop={shop} />)\n      )}\n    </Div>\n  );\n};\n","import React from \"react\";\nimport BootstrapProvider from \"@bootstrap-styled/provider\";\nimport { Container } from \"@bootstrap-styled/v4\";\n\nimport ShopList from \"./containers/ShopList\";\n\nconst myTheme = {\n  \"$btn-primary-bg\": \"blue\",\n  \"$btn-primary-color\": \"white\",\n};\n\nfunction App() {\n  return (\n    <BootstrapProvider theme={myTheme}>\n      <Container className=\"py-2\">\n        <div className=\"App\">\n          <header className=\"App-header\"></header>\n          <ShopList />\n        </div>\n      </Container>\n    </BootstrapProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}